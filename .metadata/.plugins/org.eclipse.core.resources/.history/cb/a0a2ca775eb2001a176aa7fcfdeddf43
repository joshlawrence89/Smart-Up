package com.capt.inv.model;


import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.*;
import org.apache.tomcat.jni.User;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import javax.persistence.Id;


@Entity
@Table(name="projects")
public class Project {
	
	public Project() {}
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
private int projectId;
	
	@Column(nullable=false)
	private String projectName;
	
	@Column(nullable=false)
	private String description;
	
	@Column(nullable=false)
	private int targetAmount;
	
	private LocalDate dateCreation;
	
	@Column(nullable=false)
	private String status;

	@OneToMany(mappedBy = "project", fetch=FetchType.EAGER, cascade= CascadeType.ALL)
	private List<Pledge> pledges = new ArrayList<Pledge>();
	
	@ManyToOne
	@JoinColumn(name="userId")
	@OnDelete(action = OnDeleteAction.CASCADE)
	private Users user;
	


	public int getProjectId() {
		return projectId;
	}

	public void setProjectId(int projectId) {
		this.projectId = projectId;
	}

	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String name) {
		this.projectName = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getTargetAmount() {
		return targetAmount;
	}

	public void setTargetAmount(int targetAmount) {
		this.targetAmount = targetAmount;
	}


	public LocalDate getDateCreation() {
		return dateCreation;
	}

	public void setDateCreation(LocalDate dateCreation) {
		this.dateCreation = dateCreation;
	}

	public List<Pledge> getPledges() {
		return pledges;
	}

	public void addPledge(Pledge pledge) {
		pledges.add(pledge);
	}

	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
	
	public void setPledges(List<Pledge> pledges) {
		this.pledges = pledges;
	}
	
	public void isTargetAchieved(int pledgeAmount) {
		int total = 0;
		for(Pledge pledge : pledges) {
			total += pledge.getPledgeAmount();
		}
		if((total + pledgeAmount) >= targetAmount) {
			status = "Closed";
		}
	}	
}
